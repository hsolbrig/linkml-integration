id: https://linkml.org/testing
title: LinkML integration testing harness manifest model
name: integration
description: |-
  Model for testing manifest for linkml integration.  
  
  This model allows the definition of:
  * modules - major software modules to be tested.  This includes loaders, dumpers, generators and other misc tools
  * subsets - arbitrary tags used for grouping and categorizing tests.  Tests cn be selectively run or omitted based
              on subset membership
  * comparators - functions that compare expected and actual outputs 
  * filters - functions that can tweak expected and actual output to remove untested portions (dates, versions, etc.)
  * test sets - collections of tests to be run against a specified module

license: https://creativecommons.org/publicdomain/zero/1.0/
version: 0.1.0

prefixes:
  linkml: https://w3id.org/linkml/
  test: https://linkml.org/testing/

imports:
  - linkml:types

types:
  Pythonpath:
    typeof: string
    description: A python style file path, including an optional entry point
    examples:
      - value: linkml.generators.jsonldgen:cli"

  Unixpath:
    typeof: string
    description: A unix style path. Usually relative in our situation.

default_range: string

classes:
  Filepath:
    description: A relative path to a file or directory.
    attributes:
      path:
        range: Unixpath
        required: true
      is_directory:
        range: boolean
        description: True means that the path describes a directory, false a file
        ifabsent: False

  # -------------------------
  # Subsets
  # -------------------------
  Subset:
    description: A tag used to categorize modules and tests
    attributes:
      name:
        range: string
        identifier: true
        description: Unique name of specific subset
      description:
        range: string
        description: Description of the particular subset


  # -------------------------
  # Comparators
  # -------------------------
  Comparator:
    description: |-
      Output comparator. Signature: comparator(expected: str, actual: str) -> Optional[str]
      An empty / null return indicates success. Non-compare returns a description of the difference
    attributes:
      name:
        range: string
        identifier: true
        description: Unique name of a specific comparator
      entry_point:
        range: string
        required: true
        description: Comparator entry point
        examples:
          - value: utils.compare_rdf:compare_rdf
      description:
        range: string
        description: Description of comparator function and use
      method:
        readonly: The resolved method that actually gets called.  Filled in by the loader.
        notes: We don't have a LinkML type for Callable, but the signature is Callable[[str, str], Optional[str]]

  # -------------------------
  # Filters
  # -------------------------
  Filter:
    description: |-
      Both newly generated output and existing data are run through this filter before comparison.
      In addition, existing data is run through this filter before being written.  The primary purpose
      of the filter is to remove location and temporal metadata from the output files.
      Signature: filter(txt: str) -> str
    attributes:
      name:
        range: string
        identifier: true
      entry_point:
        range: string
        required: true
        description: Filter entry point
        examples:
          - value: ldcontext_metadata_filter
      description:
        range: string
        description: comparator description
      method:
        readonly: The resolved method that actually gets called.
        notes: We don't have a LinkML type for Callable, but the signature is Callable[[str], str]

  # -------------------------
  # Validators
  # -------------------------
  Validator:
    description: |-
      Content validation. Used to determine whether the output parses in the target language
      Signature: validator(txt: str) -> Optional[str]"
    attributes:
      name:
        range: string
        identifier: true
      entry_point:
        range: string
        required: true
        description: Filter entry point
        examples:
          - value: ldcontext_metadata_filter
      description:
        range: string
        description: comparator description
      method:
        readonly: The resolved method that actually gets called.
        notes: We don't have a LinkML type for Callable, but the signature is Callable[[str], str]

  # -------------------------
  # Modules
  # -------------------------
  Module:
    description: |-
      The formal description of a LinkML software module to be tested.  Each module is referenced in the
      TestSet, accompanied by the set of tests that are run against it
    attributes:
      name:
        range: string
        identifier: true
        description: Unique module name
      description:
        range: string
        description: Description of the module
      entry_point:
        range: Pythonpath
        required: true
        description: Module name and entry point
        examples:
          - value: linkml_runtime.loaders.YAMLLoader:load_any
      entry_type:
        range: ModuleCallers
        required: true
        description: type of module invocation (Loader, Dumper, Generator, etc.)
      method:
        readonly: The resolved entry_point that actually gets called.  Filled in by the loader
      filter:
        range: Filter
        description: pre comparison filter to remove metadata, etc.
        ifabsent: string(identity_filter)
      comparator:
        range: Comparator
        description: Comparator to be used for the particular module's output
        ifabsent: string(string_comparator)
      subsets:
        range: Subset
        description: Subset(s) that this module belongs to
        multivalued: True
      skip:
        range: boolean
        description: Skip this module if true
        ifabsent: False



  # -------------------------
  # Test Sets
  # -------------------------
  TestEntry:
    description: A specific test to be executed in the context of a module
    attributes:
      name:
        range: string
        description: Optional name of the specific test.
        notes: Must be unique within the context of the module.  If absent, the target path will be used instead
      description:
        range: string
        description: Reason the test exists -- what it tests
      issues:
        range: string
        description: Github issue(s) that the test addresses
        multivalued: True
      source:
        range: Filepath
        description: source file or directory -- none if omitted
      target:
        range: Filepath
        description: target file or directory
        required: true
      parameters:
        range: string
        description: generator parameter string
      use_stdout:
        range: boolean
        description: output appears on stdout.  Catch and redirect to the output file
        ifabsent: False
      fail_text:
        range: string
        description: If present, string(s) that should be found in failure text
        multivalued: true
      subsets:
        range: Subset
        description: Subset(s) that this particular test belongs to. Can be used as a filter
        multivalued: True
      skip:
        range: boolean
        description: Skip this test if true
        ifabsent: False
      filter:
        range: Filter
        description: If present, override module level filter
      comparator:
        range: Comparator
        description: If present, override module level comparator

  TestSet:
    attributes:
      module:
        description: module to be tested
        range: Module
        identifier: true
      tests:
        description: collection of tests to be executed against the named module
        range: TestEntry
        multivalued: true
        inlined_as_list: true

  # ----------------------------
  # A manifest
  # ----------------------------
  Manifest:
    description: A collection of Subsets, modules, comparators, and/or a manifest
    attributes:
      description:
        range: string
        description: A description of the intent and purpose of a test set
      subsets:
        description: Subsets used in the model
        range: Subset
        inlined: true
        multivalued: true
      comparators:
        description: Comparators that can be referenced in the model
        range: Comparator
        inlined: true
        multivalued: true
      filters:
        description: Precomparison filters
        range: Filter
        inlined: true
        multivalued: true
      modules:
        description: Testing modules
        range: Module
        inlined: true
        multivalued: true
      tests:
        description: Actual test sets
        range: TestSet
        inlined: true
        multivalued: true

enums:
  ModuleCallers:
    description: Wrapper code for various modules
    permissible_values:
      Loader:
      Dumper:
      Generator:
